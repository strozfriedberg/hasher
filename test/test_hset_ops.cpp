#include <catch2/catch_test_macros.hpp>

#include "hashset/hset_ops.h"

#include <algorithm>

TEST_CASE("union_records_empty_sets") {
  const RecordHeader arhdr{
    38,
    0,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

/*
  const uint8_t abuf[] = {
  };
*/

  const RecordData ardat{ nullptr, nullptr };

  const RecordHeader brhdr{
    38,
    0,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

/*
  const uint8_t bbuf[] = {
  };
*/

  const RecordData brdat{ nullptr, nullptr };

  const auto [ab_u, ab_otypes] = union_op(arhdr, ardat, brhdr, brdat);
  const auto [ba_u, ba_otypes] = union_op(brhdr, brdat, arhdr, ardat);

  const decltype(ab_otypes) exp_otypes = { SFHASH_MD5, SFHASH_SHA_1 };

  const decltype(ab_u) exp_u = {
  };

  CHECK(ab_otypes == exp_otypes);
  CHECK(ab_u == exp_u);

  CHECK(ba_otypes == exp_otypes);
  CHECK(ba_u == exp_u);
}

TEST_CASE("union_records_one_empty_operand") {
  const RecordHeader arhdr{
    38,
    1,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

  const uint8_t abuf[] = {
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67
  };

  const RecordData ardat{ abuf, abuf + sizeof(abuf) };

  const RecordHeader brhdr{
    38,
    0,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

/*
  const uint8_t bbuf[] = {
  };
*/

  const RecordData brdat{ nullptr, nullptr };

  const auto [ab_u, ab_otypes] = union_op(arhdr, ardat, brhdr, brdat);
  const auto [ba_u, ba_otypes] = union_op(brhdr, brdat, arhdr, ardat);

  const decltype(ab_otypes) exp_otypes = { SFHASH_MD5, SFHASH_SHA_1 };

  const decltype(ab_u) exp_u = {
    {
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67
    }
  };

  CHECK(ab_otypes == exp_otypes);
  CHECK(ab_u == exp_u);

  CHECK(ba_otypes == exp_otypes);
  CHECK(ba_u == exp_u);
}

TEST_CASE("union_records_self") {

  const RecordHeader arhdr{
    38,
    1,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

  const uint8_t abuf[] = {
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67
  };

  const RecordData ardat{ abuf, abuf + sizeof(abuf) };

  const auto [aa_u, aa_otypes] = union_op(arhdr, ardat, arhdr, ardat);

  const decltype(aa_otypes) exp_otypes = { SFHASH_MD5, SFHASH_SHA_1 };

  const decltype(aa_u) exp_u = {
    {
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67
    }
  };

  CHECK(aa_otypes == exp_otypes);
  CHECK(aa_u == exp_u);
}

TEST_CASE("union_records_nonempty_nonequal") {
  const RecordHeader arhdr{
    38,
    2,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

  const uint8_t abuf[] = {
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67,
    0x01,
    0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
    0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
    0x01,
    0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
    0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
    0xFE, 0xDC, 0xBA, 0x98
  };

  const RecordData ardat{ abuf, abuf + sizeof(abuf) };

  const RecordHeader brhdr{
    38,
    2,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

  const uint8_t bbuf[] = {
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67,
    0x01,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x01,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF
  };

  const RecordData brdat{ bbuf, bbuf + sizeof(bbuf) };

  const auto [ab_u, ab_otypes] = union_op(arhdr, ardat, brhdr, brdat);
  const auto [ba_u, ba_otypes] = union_op(brhdr, brdat, arhdr, ardat);

  const decltype(ab_otypes) exp_otypes = { SFHASH_MD5, SFHASH_SHA_1 };

  const decltype(ab_u) exp_u = {
    {
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67
    },
    {
      0x01,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0x01,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0xFE, 0xDC, 0xBA, 0x98
    },
    {
      0x01,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0x01,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF
    }
  };

  CHECK(ab_otypes == exp_otypes);
  CHECK(ab_u == exp_u);

  CHECK(ba_otypes == exp_otypes);
  CHECK(ba_u == exp_u);
}
