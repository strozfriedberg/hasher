#include <catch2/catch_test_macros.hpp>

#include "hashset/hset_ops.h"

#include <algorithm>

TEST_CASE("setops_empty_sets") {
  const RecordHeader arhdr{
    38,
    0,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

/*
  const uint8_t abuf[] = {
  };
*/

  const RecordData ardat{ nullptr, nullptr };

  const RecordHeader brhdr{
    38,
    0,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

/*
  const uint8_t bbuf[] = {
  };
*/

  const RecordData brdat{ nullptr, nullptr };

  const auto [aub, aub_otypes] = union_op(arhdr, ardat, brhdr, brdat);
  const auto [bua, bua_otypes] = union_op(brhdr, brdat, arhdr, ardat);

  const auto [anb, anb_otypes] = intersect_op(arhdr, ardat, brhdr, brdat);
  const auto [bna, bna_otypes] = intersect_op(brhdr, brdat, arhdr, ardat);

  const auto [a_b, a_b_otypes] = intersect_op(arhdr, ardat, brhdr, brdat);
  const auto [b_a, b_a_otypes] = intersect_op(brhdr, brdat, arhdr, ardat);

  const decltype(aub_otypes) exp_otypes = { SFHASH_MD5, SFHASH_SHA_1 };

  const decltype(aub) exp = {
  };

  CHECK(aub_otypes == exp_otypes);
  CHECK(aub == exp);

  CHECK(bua_otypes == exp_otypes);
  CHECK(bua == exp);

  CHECK(anb_otypes == exp_otypes);
  CHECK(anb == exp);

  CHECK(bna_otypes == exp_otypes);
  CHECK(bna == exp);

  CHECK(a_b_otypes == exp_otypes);
  CHECK(a_b == exp);

  CHECK(b_a_otypes == exp_otypes);
  CHECK(b_a == exp);
}

TEST_CASE("union_one_empty_operand") {
  const RecordHeader arhdr{
    38,
    1,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

  uint8_t abuf[] = {
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67
  };

  const RecordData ardat{ std::begin(abuf), std::end(abuf) };

  const RecordHeader brhdr{
    38,
    0,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

/*
  const uint8_t bbuf[] = {
  };
*/

  const RecordData brdat{ nullptr, nullptr };

  const auto [ab_u, ab_otypes] = union_op(arhdr, ardat, brhdr, brdat);
  const auto [ba_u, ba_otypes] = union_op(brhdr, brdat, arhdr, ardat);

  const decltype(ab_otypes) exp_otypes = { SFHASH_MD5, SFHASH_SHA_1 };

  const decltype(ab_u) exp_u = {
    {
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67
    }
  };

  CHECK(ab_otypes == exp_otypes);
  CHECK(ab_u == exp_u);

  CHECK(ba_otypes == exp_otypes);
  CHECK(ba_u == exp_u);
}

TEST_CASE("setops_self") {
  const RecordHeader arhdr{
    38,
    1,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

  uint8_t abuf[] = {
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67
  };

  const RecordData ardat{ std::begin(abuf), std::end(abuf) };

  const auto [aua, aua_otypes] = union_op(arhdr, ardat, arhdr, ardat);
  const auto [ana, ana_otypes] = intersect_op(arhdr, ardat, arhdr, ardat);
  const auto [a_a, a_a_otypes] = difference_op(arhdr, ardat, arhdr, ardat);

  const decltype(aua_otypes) exp_otypes = { SFHASH_MD5, SFHASH_SHA_1 };

  const decltype(aua) exp_aua = {
    {
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67
    }
  };

  const decltype(ana) exp_ana = {
    {
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67
    }
  };

  const decltype(a_a) exp_a_a = {
  };

  CHECK(aua_otypes == exp_otypes);
  CHECK(aua == exp_aua);

  CHECK(ana_otypes == exp_otypes);
  CHECK(ana == exp_ana);

  CHECK(a_a_otypes == exp_otypes);
  CHECK(a_a == exp_a_a);
}

TEST_CASE("setops_overlapping_nonequal") {
  const RecordHeader arhdr{
    38,
    2,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

  uint8_t abuf[] = {
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67,
    0x01,
    0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
    0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
    0x01,
    0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
    0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
    0xFE, 0xDC, 0xBA, 0x98
  };

  const RecordData ardat{ std::begin(abuf), std::end(abuf) };

  const RecordHeader brhdr{
    38,
    2,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

  uint8_t bbuf[] = {
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67,
    0x01,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x01,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF
  };

  const RecordData brdat{ std::begin(bbuf), std::end(bbuf) };

  const auto [aub, aub_otypes] = union_op(arhdr, ardat, brhdr, brdat);
  const auto [bua, bua_otypes] = union_op(brhdr, brdat, arhdr, ardat);
  const auto [anb, anb_otypes] = intersect_op(arhdr, ardat, brhdr, brdat);
  const auto [bna, bna_otypes] = intersect_op(brhdr, brdat, arhdr, ardat);
  const auto [a_b, a_b_otypes] = difference_op(arhdr, ardat, brhdr, brdat);
  const auto [b_a, b_a_otypes] = difference_op(brhdr, brdat, arhdr, ardat);

  const decltype(aub_otypes) exp_otypes = { SFHASH_MD5, SFHASH_SHA_1 };

  const decltype(aub) exp_u = {
    {
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67
    },
    {
      0x01,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0x01,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0xFE, 0xDC, 0xBA, 0x98
    },
    {
      0x01,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0x01,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF
    }
  };

  const decltype(aub) exp_n = {
    {
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67
    }
  };

  const decltype(aub) exp_a_b = {
    {
      0x01,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0x01,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0xFE, 0xDC, 0xBA, 0x98
    }
  };

  const decltype(aub) exp_b_a = {
    {
      0x01,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0x01,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF
    }
  };

  CHECK(aub_otypes == exp_otypes);
  CHECK(aub == exp_u);

  CHECK(bua_otypes == exp_otypes);
  CHECK(bua == exp_u);

  CHECK(anb_otypes == exp_otypes);
  CHECK(anb == exp_n);

  CHECK(bna_otypes == exp_otypes);
  CHECK(bna == exp_n);

  CHECK(a_b_otypes == exp_otypes);
  CHECK(a_b == exp_a_b);

  CHECK(b_a_otypes == exp_otypes);
  CHECK(b_a == exp_b_a);
}

TEST_CASE("setops_disjoint") {
  const RecordHeader arhdr{
    38,
    2,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

  uint8_t abuf[] = {
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67,
    0x01,
    0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
    0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
    0x01,
    0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
    0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
    0xFE, 0xDC, 0xBA, 0x98
  };

  const RecordData ardat{ std::begin(abuf), std::end(abuf) };

  const RecordHeader brhdr{
    38,
    2,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

  uint8_t bbuf[] = {
    0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x01,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0x01,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    0xFF, 0xFF, 0xFF, 0xFF
  };

  const RecordData brdat{ std::begin(bbuf), std::end(bbuf) };

  const auto [aub, aub_otypes] = union_op(arhdr, ardat, brhdr, brdat);
  const auto [bua, bua_otypes] = union_op(brhdr, brdat, arhdr, ardat);
  const auto [anb, anb_otypes] = intersect_op(arhdr, ardat, brhdr, brdat);
  const auto [bna, bna_otypes] = intersect_op(brhdr, brdat, arhdr, ardat);
  const auto [a_b, a_b_otypes] = difference_op(arhdr, ardat, brhdr, brdat);
  const auto [b_a, b_a_otypes] = difference_op(brhdr, brdat, arhdr, ardat);

  const decltype(anb_otypes) exp_otypes = { SFHASH_MD5, SFHASH_SHA_1 };

  const decltype(aub) exp_u = {
    {
      0x01,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00
    },
    {
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67
    },
    {
      0x01,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0x01,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0xFE, 0xDC, 0xBA, 0x98
    },
    {
      0x01,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0x01,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF
    }
  };

  const decltype(anb) exp_n = {
  };

  const decltype(a_b) exp_a_b = {
    {
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67
    },
    {
      0x01,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0x01,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0xFE, 0xDC, 0xBA, 0x98, 0x76, 0x54, 0x32, 0x10,
      0xFE, 0xDC, 0xBA, 0x98
    }
  };

  const decltype(b_a) exp_b_a = {
    {
      0x01,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x01,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00
    },
    {
      0x01,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0x01,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
      0xFF, 0xFF, 0xFF, 0xFF
    }
  };

  CHECK(aub_otypes == exp_otypes);
  CHECK(aub == exp_u);

  CHECK(bua_otypes == exp_otypes);
  CHECK(bua == exp_u);

  CHECK(anb_otypes == exp_otypes);
  CHECK(anb == exp_n);

  CHECK(bna_otypes == exp_otypes);
  CHECK(bna == exp_n);

  CHECK(a_b_otypes == exp_otypes);
  CHECK(a_b == exp_a_b);

  CHECK(b_a_otypes == exp_otypes);
  CHECK(b_a == exp_b_a);
}


