#include <catch2/catch_test_macros.hpp>

#include "hashset/hset_ops.h"

#include <algorithm>

TEST_CASE("union_records_empty_right") {

  const RecordHeader lrhdr{
    38,
    1,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

  const uint8_t lbuf[] = {
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
    0x01, 0x23, 0x45, 0x67,
  };

  const RecordData lrdat{ lbuf, lbuf + sizeof(lbuf) };

  const RecordHeader rrhdr{
    38,
    0,
    {
      { SFHASH_MD5, "MD5", 16 },
      { SFHASH_SHA_1, "SHA-1", 20 }
    }
  };

/*
  const uint8_t rbuf[] = {
  };
*/

  const RecordData rrdat{ nullptr, nullptr };

  const auto [act_u, act_otypes] = union_op(lrhdr, lrdat, rrhdr, rrdat);

  const decltype(act_otypes) exp_otypes = { SFHASH_MD5, SFHASH_SHA_1 };

  const decltype(act_u) exp_u = {
    {
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF,
      0x01, 0x23, 0x45, 0x67,
    }
  };

  CHECK(act_otypes == exp_otypes);
  CHECK(act_u == exp_u);
}
